#include "../src/bson/bson.hpp"
#include "cxxtest/TestSuite.h"

namespace bsond = pot::bson::deserializer;

class ValidationTests : public CxxTest::TestSuite {
public:
  void testValidEmptyDocument() {
    uint8_t buf[] = { 0x05, 0x00, 0x00, 0x00, 0x00 };

    bsond::Document doc(buf, sizeof(buf));

    TS_ASSERT(doc.valid<10>(bsond::default_validation_options));
  }

  void testInvalidIncompleteEmptyDocument() {
    uint8_t buf[] = { 0x05, 0x00, 0x00, 0x00, 0x00 };

    {
      bsond::Document doc(buf, sizeof(buf) - 1);
      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    {
      bsond::Document doc(buf, sizeof(buf) - 2);
      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    {
      bsond::Document doc(buf, sizeof(buf) - 3);
      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }
  }

  void testInvalidEmptyDocumentLength() {
    {
      uint8_t buf[] = { 0x06, 0x00, 0x00, 0x00, 0x00 };
      bsond::Document doc(buf, sizeof(buf));
      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = { 0x04, 0x00, 0x00, 0x00, 0x00 };
      bsond::Document doc(buf, sizeof(buf));
      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    bsond::ValidationOptions opts = { .correct_doc_length = false,
                                      .valid_array_indices = true };

    {
      uint8_t buf[] = { 0x06, 0x00, 0x00, 0x00, 0x00 };
      bsond::Document doc(buf, sizeof(buf));
      TS_ASSERT(doc.valid(opts));
    }

    {
      uint8_t buf[] = { 0x04, 0x00, 0x00, 0x00, 0x00 };
      bsond::Document doc(buf, sizeof(buf));
      TS_ASSERT(doc.valid(opts));
    }
  }

  void testDouble() {
    uint8_t buf[] = {
      0x10, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x9A,
      0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x00,
    };
    bsond::Document doc(buf, sizeof(buf));

    TS_ASSERT(doc.valid(bsond::default_validation_options));
  }

  void testString() {
    {
      uint8_t buf[] = {
        0x16, 0x00, 0x00, 0x00, 0x02, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = {
        0x16, 0x00, 0x00, 0x00, 0x02, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x00,
        0x05, 0x00, 0x00, 0x00, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = {
        0x16, 0x00, 0x00, 0x00, 0x02, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x01, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = {
        0x16, 0x00, 0x00, 0x00, 0x02, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid<2>(bsond::default_validation_options));
    }
  }

  void testNestedDocument() {
    {
      uint8_t buf[] = {
        0x16, 0x00, 0x00, 0x00, 0x03, 0x61, 0x00, 0x0E, 0x00, 0x00, 0x00,
        0x02, 0x62, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = {
        0x16, 0x00, 0x00, 0x00, 0x03, 0x61, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x02, 0x62, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = {
        0x16, 0x00, 0x00, 0x00, 0x03, 0x61, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x02, 0x62, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(doc.valid(
          { .correct_doc_length = false, .valid_array_indices = true }));
    }
  }

  void testNestedArray() {
    {
      // Valid document with nested array.
      uint8_t buf[] = {
        0x62, 0x00, 0x00, 0x00, 0x04, 0x61, 0x72, 0x72, 0x00, 0x58, 0x00,
        0x00, 0x00, 0x01, 0x30, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99,
        0xC9, 0x3F, 0x02, 0x31, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x6C,
        0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x03, 0x32, 0x00, 0x0E, 0x00,
        0x00, 0x00, 0x02, 0x61, 0x00, 0x02, 0x00, 0x00, 0x00, 0x62, 0x00,
        0x00, 0x05, 0x33, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
        0x03, 0x08, 0x34, 0x00, 0x01, 0x08, 0x35, 0x00, 0x00, 0x0A, 0x36,
        0x00, 0x10, 0x37, 0x00, 0x15, 0x00, 0x00, 0x00, 0x12, 0x38, 0x00,
        0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(doc.valid(bsond::default_validation_options));
    }

    {
      // Nested array with item 1 having index of 0.
      uint8_t buf[] = {
        0x62, 0x00, 0x00, 0x00, 0x04, 0x61, 0x72, 0x72, 0x00, 0x58, 0x00,
        0x00, 0x00, 0x01, 0x30, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99,
        0xC9, 0x3F, 0x02, 0x30, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x6C,
        0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x03, 0x32, 0x00, 0x0E, 0x00,
        0x00, 0x00, 0x02, 0x61, 0x00, 0x02, 0x00, 0x00, 0x00, 0x62, 0x00,
        0x00, 0x05, 0x33, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
        0x03, 0x08, 0x34, 0x00, 0x01, 0x08, 0x35, 0x00, 0x00, 0x0A, 0x36,
        0x00, 0x10, 0x37, 0x00, 0x15, 0x00, 0x00, 0x00, 0x12, 0x38, 0x00,
        0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
      TS_ASSERT(doc.valid(
          { .correct_doc_length = true, .valid_array_indices = false }));
    }

    {
      // Valid document with nested array that is cut off ~half way.
      uint8_t buf[] = {
        0x62, 0x00, 0x00, 0x00, 0x04, 0x61, 0x72, 0x72, 0x00, 0x58, 0x00,
        0x00, 0x00, 0x01, 0x30, 0x00, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99,
        0xC9, 0x3F, 0x02, 0x31, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x6C,
        0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x03, 0x32, 0x00, 0x0E, 0x00,
        0x00, 0x00, 0x02, 0x61, 0x00, 0x02, 0x00, 0x00, 0x00, 0x62, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }
  }

  void testBinary() {
    uint8_t buf[] = {
      0x12, 0x00, 0x00, 0x00, 0x05, 0x61, 0x00, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x02, 0x01, 0x00,
    };
    bsond::Document doc(buf, sizeof(buf));

    TS_ASSERT(doc.valid(bsond::default_validation_options));
  }

  void testBool() {
    {
      uint8_t buf[] = {
        0x14, 0x00, 0x00, 0x00, 0x08, 0x74, 0x72, 0x75, 0x65, 0x00,
        0x01, 0x08, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = {
        0x14, 0x00, 0x00, 0x00, 0x08, 0x74, 0x72, 0x75, 0x65, 0x00,
        0x05, 0x08, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }

    {
      uint8_t buf[] = {
        0x14, 0x00, 0x00, 0x00, 0x08, 0x74, 0x72, 0x75, 0x65, 0x00,
        0x01, 0x08, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x00, 0x06, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }
  }

  void testNull() {
    uint8_t buf[] = {
      0x0A, 0x00, 0x00, 0x00, 0x0A, 0x6E, 0x69, 0x6C, 0x00, 0x00,
    };
    bsond::Document doc(buf, sizeof(buf));

    TS_ASSERT(doc.valid(bsond::default_validation_options));
  }

  void testInt32() {
    uint8_t buf[] = {
      0x0E, 0x00, 0x00, 0x00, 0x10, 0x76, 0x61,
      0x6C, 0x00, 0x54, 0x26, 0x00, 0x00, 0x00,
    };
    bsond::Document doc(buf, sizeof(buf));

    TS_ASSERT(doc.valid(bsond::default_validation_options));
  }

  void testInt64() {
    uint8_t buf[] = {
      0x12, 0x00, 0x00, 0x00, 0x12, 0x76, 0x61, 0x6C, 0x00,
      0x12, 0xFA, 0xE2, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    bsond::Document doc(buf, sizeof(buf));

    TS_ASSERT(doc.valid(bsond::default_validation_options));
  }

  void testComplexDocument() {
    {
      uint8_t buf[] = {
        0xFA, 0x00, 0x00, 0x00, 0x01, 0x64, 0x62, 0x6C, 0x00, 0x9A, 0x99, 0x99,
        0x99, 0x99, 0x99, 0xD9, 0x3F, 0x02, 0x73, 0x74, 0x72, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x03, 0x64, 0x6F,
        0x63, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x02, 0x74, 0x68, 0x69, 0x73, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x69, 0x73, 0x00, 0x02, 0x61, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x6E, 0x65, 0x73, 0x74, 0x65, 0x64, 0x00, 0x02, 0x64, 0x6F,
        0x63, 0x00, 0x06, 0x00, 0x00, 0x00, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00,
        0x00, 0x05, 0x62, 0x75, 0x66, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x03, 0x02, 0x01, 0x03, 0x62, 0x6F, 0x6F, 0x6C, 0x73, 0x00, 0x0D, 0x00,
        0x00, 0x00, 0x08, 0x74, 0x00, 0x01, 0x08, 0x66, 0x00, 0x00, 0x00, 0x0A,
        0x6E, 0x69, 0x6C, 0x00, 0x03, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x19, 0x00,
        0x00, 0x00, 0x10, 0x33, 0x32, 0x00, 0x94, 0x26, 0x00, 0x00, 0x12, 0x36,
        0x34, 0x00, 0xB1, 0x68, 0xDE, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x61, 0x72, 0x72, 0x00, 0x59, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x9A,
        0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x02, 0x31, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x03, 0x32,
        0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x61, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x62, 0x00, 0x00, 0x05, 0x33, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x03, 0x02, 0x01, 0x08, 0x34, 0x00, 0x01, 0x08, 0x35, 0x00, 0x00, 0x0A,
        0x36, 0x00, 0x10, 0x37, 0x00, 0x15, 0x00, 0x00, 0x00, 0x12, 0x38, 0x00,
        0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(doc.valid(bsond::default_validation_options));
    }

    {
      // Invalid length
      uint8_t buf[] = {
        0x67, 0x00, 0x00, 0x00, 0x01, 0x64, 0x62, 0x6C, 0x00, 0x9A, 0x99, 0x99,
        0x99, 0x99, 0x99, 0xD9, 0x3F, 0x02, 0x73, 0x74, 0x72, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x03, 0x64, 0x6F,
        0x63, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x02, 0x74, 0x68, 0x69, 0x73, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x69, 0x73, 0x00, 0x02, 0x61, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x6E, 0x65, 0x73, 0x74, 0x65, 0x64, 0x00, 0x02, 0x64, 0x6F,
        0x63, 0x00, 0x06, 0x00, 0x00, 0x00, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00,
        0x00, 0x05, 0x62, 0x75, 0x66, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x03, 0x02, 0x01, 0x03, 0x62, 0x6F, 0x6F, 0x6C, 0x73, 0x00, 0x0D, 0x00,
        0x00, 0x00, 0x08, 0x74, 0x00, 0x01, 0x08, 0x66, 0x00, 0x00, 0x00, 0x0A,
        0x6E, 0x69, 0x6C, 0x00, 0x03, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x19, 0x00,
        0x00, 0x00, 0x10, 0x33, 0x32, 0x00, 0x94, 0x26, 0x00, 0x00, 0x12, 0x36,
        0x34, 0x00, 0xB1, 0x68, 0xDE, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x61, 0x72, 0x72, 0x00, 0x59, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x9A,
        0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x02, 0x31, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x03, 0x32,
        0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x61, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x62, 0x00, 0x00, 0x05, 0x33, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x03, 0x02, 0x01, 0x08, 0x34, 0x00, 0x01, 0x08, 0x35, 0x00, 0x00, 0x0A,
        0x36, 0x00, 0x10, 0x37, 0x00, 0x15, 0x00, 0x00, 0x00, 0x12, 0x38, 0x00,
        0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
      TS_ASSERT(doc.valid(
          { .correct_doc_length = false, .valid_array_indices = true }));
    }

    {
      // Set of null bytes in middle.
      uint8_t buf[] = {
        0xFA, 0x00, 0x00, 0x00, 0x01, 0x64, 0x62, 0x6C, 0x00, 0x9A, 0x99, 0x99,
        0x99, 0x99, 0x99, 0xD9, 0x3F, 0x02, 0x73, 0x74, 0x72, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x03, 0x64, 0x6F,
        0x63, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x02, 0x74, 0x68, 0x69, 0x73, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x69, 0x73, 0x00, 0x02, 0x61, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x6E, 0x65, 0x73, 0x74, 0x65, 0x64, 0x00, 0x02, 0x64, 0x6F,
        0x63, 0x00, 0x06, 0x00, 0x00, 0x00, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00,
        0x00, 0x05, 0x62, 0x75, 0x66, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x34, 0x00, 0xB1, 0x68, 0xDE, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x61, 0x72, 0x72, 0x00, 0x59, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x9A,
        0x99, 0x99, 0x99, 0x99, 0x99, 0xC9, 0x3F, 0x02, 0x31, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x03, 0x32,
        0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x61, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x62, 0x00, 0x00, 0x05, 0x33, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04,
        0x03, 0x02, 0x01, 0x08, 0x34, 0x00, 0x01, 0x08, 0x35, 0x00, 0x00, 0x0A,
        0x36, 0x00, 0x10, 0x37, 0x00, 0x15, 0x00, 0x00, 0x00, 0x12, 0x38, 0x00,
        0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      };
      bsond::Document doc(buf, sizeof(buf));

      TS_ASSERT(!doc.valid(bsond::default_validation_options));
    }
  }
};
